
#line 3 "lex.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
    
/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern yy_size_t yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

/* %endif */

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 82
#define YY_END_OF_BUFFER 83
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[245] =
    {   0,
       83,   20,   82,    1,   20,   82,   12,   82,   20,   82,
        9,   20,   82,   20,   82,   10,   20,   82,   13,   20,
       82,    8,   20,   82,   20,   82,   19,   20,   82,   14,
       20,   82,    5,   20,   82,   19,   20,   82,   19,   20,
       82,   19,   20,   82,    2,   20,   82,   17,   20,   82,
       71,   82,   74,   82,   82,   70,   82,   82,   73,   82,
       72,   82,   69,   82,   68,   69,   82,   82,   69,   82,
       66,   69,   82,   64,   69,   82,   67,   69,   82,   61,
       82,   62,   82,   63,   82,   32,   82,   31,   82,   33,
       82,   30,   82,   56,   82,   54,   82,   56,   82,   55,

       56,   82,   60,   82,   59,   82,   60,   82,   60,   82,
       58,   60,   82,   48,   82,   34,   82,   48,   49,   82,
       48,   82,   47,   48,   82,   46,   48,   82,   48,   82,
       48,   82,   48,   82,   48,   82,   48,   82,   48,   82,
       48,   82,   48,   82,   48,   82,   48,   82,   50,   82,
       53,   82,   82,   51,   82,   52,   82,   81,   82,   79,
       81,   82,   80,   82,   82,   23,   82,   21,   23,   82,
       22,   23,   82,   28,   82,   24,   28,   82,   28,   82,
       28,   82,   27,   28,   82,   29,   82,    1,   12,    7,
        3,   16,   15,   19,    6,   19,   19,   19,   74,   78,

       77,   78,   78,   65,   33,   54,   59,   57,   49,   53,
       80,   21,   24,   29,    3,   11,   19,   19,   19,   25,
       26,   19,   19,   76,   38,   35,   19,    4,   19,   76,
       19,   75,   76,   40,   18,   19,   42,   36,   37,   39,
       45,   43,   44,   41
    } ;

static yyconst flex_int16_t yy_accept[280] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        4,    7,    9,   11,   14,   16,   19,   22,   25,   27,
       30,   33,   36,   39,   42,   45,   48,   51,   53,   55,
       56,   58,   59,   61,   63,   65,   68,   69,   71,   74,
       77,   80,   82,   84,   86,   88,   90,   92,   94,   96,
       98,  100,  103,  105,  107,  109,  111,  114,  116,  118,
      121,  123,  126,  129,  131,  133,  135,  137,  139,  141,
      143,  145,  147,  149,  151,  153,  154,  156,  158,  160,

      163,  165,  166,  168,  171,  174,  176,  179,  181,  183,
      186,  188,  189,  190,  190,  191,  192,  193,  194,  195,
      196,  197,  198,  199,  200,  200,  201,  202,  202,  203,
      204,  205,  206,  207,  207,  208,  208,  209,  210,  210,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      211,  211,  212,  212,  213,  214,  214,  214,  215,  216,
      218,  219,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  221,  222,  223,  224,  224,
      225,  225,  225,  225,  225,  226,  227,  227,  227,  227,
      227,  228,  230,  230,  231,  231,  231,  231,  231,  231,

      231,  231,  231,  231,  232,  233,  234,  234,  234,  234,
      234,  235,  235,  235,  235,  235,  237,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  237,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  238,  239,  239,  239,  239,  239,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  240,  240,  240,  240,
      240,  240,  240,  240,  240,  240,  241,  241,  241,  241,
      242,  243,  243,  243,  243,  244,  244,  245,  245
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    1,    6,    1,    7,    8,    9,
       10,   11,   12,    1,    1,    1,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,    1,    1,   15,
       16,   17,    1,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   25,   28,   29,   30,   31,   32,   33,
       25,   34,   35,   36,   37,   25,   25,   38,   39,   25,
       40,   41,   42,   43,   44,    1,   45,   46,   47,   48,

       49,   50,   25,   51,   52,   25,   53,   54,   55,   56,
       57,   58,   25,   59,   60,   61,   62,   25,   25,   63,
       64,   25,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    2,    1,    1,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    4,    1,    1,    1,    1,    4,    4,
        4,    4,    4,    4,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    1,    1,    5,    4,    4,    4,    4,    4,    4,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5
    } ;

static yyconst flex_int16_t yy_base[306] =
    {   0,
        0,    0,   62,   64,   70,   73,   77,   79,   79,   86,
      122,  165,   89,   94,   97,  138,  208,    0,  142,  149,
      114,  156,  182,  184,  187,  271,  586,  584,  582,  681,
      579,  681,  106,  681,  562,  681,  681,  681,   58,    0,
      681,  557,  105,  148,  268,  681,  681,  681,  681,  195,
      681,  274,  681,  681,  681,  681,  681,  553,  681,  681,
      681,  681,  681,  681,  681,  681,    0,  681,  681,  681,
      197,  681,  681,  681,  199,  487,  681,  681,  681,  681,
      280,  681,  681,  252,  261,  253,  262,  274,  277,  266,
      269,  266,  267,  681,  681,  300,  681,  681,  681,  681,

      681,  304,  681,  485,  681,  681,  452,    0,    0,  681,
        0,  447,  681,  325,  396,    0,  681,  681,    0,  681,
      266,  288,  324,  681,  328,  681,  681,  330,    0,    0,
      394,    0,  681,  336,  681,  338,  681,  681,  346,  291,
      316,  322,  318,  323,  326,  322,  339,  340,  363,  681,
      357,  681,  359,  401,  373,  361,  312,    0,    0,    0,
      335,  376,    0,    0,  344,  253,  331,  340,  345,  360,
      359,  353,  367,  365,  681,  285,  365,  414,    0,    0,
      370,  387,  381,  390,  681,  681,  380,  381,  390,  401,
      408,    0,    0,    0,  417,  416,  424,  429,  411,  424,

      242,  152,  413,  430,  681,  681,  422,  428,  419,  435,
      681,  434,  447,  447,  439,    0,  436,  150,  443,  454,
      453,  466,  467,  451,  462,  455,  681,  466,  479,  478,
      468,  466,  472,  474,  468,  479,  482,  480,  144,  485,
      481,  681,  111,  484,  492,  502,  681,  493,  502,  501,
      504,  504,  514,  519,  520,  521,  510,  525,  511,  530,
      526,  529,  104,  523,  534,  681,  536,  532,  525,  681,
      681,  543,  533,  532,  681,  537,  681,  681,  597,  602,
      607,  612,  617,  622,  627,  632,  637,  642,  647,  649,
      651,  656,  658,  663,  668,  673,  675,  139,  109,  102,

      100,   98,   95,   91,   82
    } ;

static yyconst flex_int16_t yy_def[306] =
    {   0,
      278,    1,  279,  279,  280,  280,  281,  281,  282,  282,
      283,  283,  284,  284,  285,  285,  278,   17,  282,  282,
      286,  286,  287,  287,  288,  288,  289,  289,  278,  278,
      278,  278,  278,  278,  290,  278,  278,  278,  278,  291,
      278,  278,  291,  291,  291,  278,  278,  278,  278,  278,
      278,  292,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  293,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,

      278,  278,  278,  278,  278,  278,  278,  294,  295,  278,
      296,  278,  278,  278,  278,  297,  278,  278,  291,  278,
      291,  291,  291,  278,  278,  278,  278,  278,  298,  299,
      278,  293,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  294,  295,  296,  297,  291,
      291,  291,  300,  301,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  295,  291,  291,  302,  303,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      291,  291,  304,  305,  278,  278,  278,  278,  278,  278,

      278,  278,  278,  291,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  291,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,    0,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,

      278,  278,  278,  278,  278
    } ;

static yyconst flex_int16_t yy_nxt[746] =
    {   0,
       30,   31,   32,   33,   34,   35,   30,   36,   37,   30,
       30,   38,   39,   40,   41,   42,   30,   30,   43,   40,
       40,   40,   40,   40,   40,   40,   44,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   45,   40,   40,   46,
       47,   30,   30,   40,   43,   40,   40,   40,   40,   40,
       40,   44,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   45,   40,   40,   49,   50,   49,   50,  117,   51,
      118,   51,   49,   50,   54,   49,   50,   54,   56,   57,
       56,   57,   58,   62,   58,  206,   63,   59,   64,   59,
       62,   70,   71,   63,  205,   64,   70,   71,  194,   74,

       75,  193,   52,  180,   52,  179,   72,   76,  113,  114,
       52,   72,  164,   52,   77,  100,  101,  102,   60,   61,
       60,   61,   57,   65,   57,   57,   57,   57,   66,   57,
       57,   57,   57,   57,   57,  121,   57,   57,   68,   57,
       74,   75,  163,   94,   95,   96,   97,  268,   76,   98,
       94,   95,   96,   97,  249,   77,   98,  100,  101,  102,
      121,   57,   57,   57,   57,   57,   65,   57,   57,   57,
       57,   66,   57,   57,   57,   57,   57,   57,  122,   57,
       57,   68,   57,  104,   57,  104,   57,  246,  107,   57,
      105,  108,  105,  226,  109,  214,  110,  124,  125,  133,

      134,  135,  136,  122,   57,   57,   57,   57,   78,   79,
       80,   81,   82,   78,   78,   82,   78,   78,   78,   78,
       78,   78,   78,   83,   78,   78,   78,   78,   78,   84,
       85,   86,   78,   87,   88,   78,   78,   78,   89,   78,
       90,   78,   91,   92,   93,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   84,   85,   86,   87,   88,
       78,   78,   78,   89,   78,   90,   78,   91,   92,   93,
       78,   78,  107,   57,  140,  108,  127,  128,  109,  141,
      110,  123,  138,  139,  142,  213,  123,  123,  123,  123,
      123,  123,  176,  143,  144,  145,  182,  146,  147,  148,

      140,  149,  150,  151,  160,  141,  152,  153,  161,  142,
      129,  130,  123,  123,  123,  123,  123,  123,  143,  176,
      144,  145,  146,  147,  148,  165,  149,  113,  114,  160,
      124,  125,  127,  128,  161,  129,  130,  162,  133,  134,
      135,  136,  162,  162,  162,  162,  162,  162,  138,  139,
      165,  166,  167,  168,  169,  170,  171,  172,  173,  150,
      151,  152,  153,  177,  181,  175,  183,  184,  162,  162,
      162,  162,  162,  162,  155,  185,  166,  167,  168,  169,
      170,  171,  186,  172,  173,  187,  188,  189,  177,  178,
      181,  183,  184,  190,  178,  178,  178,  178,  178,  178,

      185,  191,  154,  195,  198,  196,  174,  131,  186,  115,
      187,  188,  199,  189,  197,  200,  201,  202,  190,  203,
      178,  178,  178,  178,  178,  178,  191,  192,  195,  204,
      198,  196,  192,  192,  192,  192,  192,  192,  199,  197,
      200,  201,  202,  207,  208,  203,  209,  210,  112,  211,
      212,  215,  216,  155,  217,  204,  218,  219,  192,  192,
      192,  192,  192,  192,  220,  221,  222,  223,  207,  208,
      224,  225,  209,  210,  211,  212,  215,  227,  216,  217,
      228,  218,  219,  229,  230,  231,  154,  232,  233,  220,
      221,  234,  222,  223,  235,  224,  225,  236,  237,  137,

      238,  239,  227,  240,  241,  228,  242,  243,  229,  244,
      230,  231,  232,  233,  245,  247,  234,  248,  250,  235,
      251,  252,  257,  236,  237,  238,  239,  253,  240,  241,
      254,  242,  243,  255,  244,  256,  258,  259,  260,  245,
      247,  261,  248,  250,  262,  251,  263,  252,  257,  264,
      265,  267,  253,  266,  269,  254,  270,  271,  255,  272,
      256,  273,  258,  259,  260,  274,  131,  261,  275,  262,
      276,  277,  263,  120,  264,  115,  265,  267,  266,  269,
      112,  278,  270,  271,  272,   57,  273,   57,  278,  278,
      278,  274,  278,  275,  278,  276,  277,   48,   48,   48,

       48,   48,   53,   53,   53,   53,   53,   55,   55,   55,
       55,   55,   57,   57,   57,   57,   57,   67,   67,   67,
       67,   67,   69,   69,   69,   69,   69,   73,   73,   73,
       73,   73,   99,   99,   99,   99,   99,  103,  103,  103,
      103,  103,  106,  106,  106,  106,  106,  111,  111,  111,
      111,  111,  116,  116,  119,  119,  126,  126,  126,  126,
      126,  132,  132,  156,  156,  278,  156,  156,  157,  157,
      278,  157,  157,  158,  278,  158,  158,  158,  159,  159,
       29,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,

      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278
    } ;

static yyconst flex_int16_t yy_chk[746] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    3,    4,    4,   39,    3,
       39,    4,    5,    5,    5,    6,    6,    6,    7,    7,
        8,    8,    7,    9,    8,  305,    9,    7,    9,    8,
       10,   13,   13,   10,  304,   10,   14,   14,  303,   15,

       15,  302,    3,  301,    4,  300,   13,   15,   33,   33,
        5,   14,  299,    6,   15,   21,   21,   21,    7,    7,
        8,    8,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   43,   11,   11,   11,   11,
       16,   16,  298,   19,   19,   19,   19,  263,   16,   19,
       20,   20,   20,   20,  243,   16,   20,   22,   22,   22,
       43,   11,   11,   11,   11,   12,   12,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   12,   44,   12,
       12,   12,   12,   23,   23,   24,   24,  239,   25,   25,
       23,   25,   24,  218,   25,  202,   25,   50,   50,   71,

       71,   75,   75,   44,   12,   12,   12,   12,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   26,   26,   84,   26,   52,   52,   26,   85,
       26,   45,   81,   81,   86,  201,   45,   45,   45,   45,
       45,   45,  176,   87,   88,   89,  166,   90,   91,   92,

       84,   93,   96,   96,  121,   85,  102,  102,  122,   86,
       52,   52,   45,   45,   45,   45,   45,   45,   87,  157,
       88,   89,   90,   91,   92,  140,   93,  114,  114,  121,
      125,  125,  128,  128,  122,   52,   52,  123,  134,  134,
      136,  136,  123,  123,  123,  123,  123,  123,  139,  139,
      140,  141,  142,  143,  144,  145,  146,  147,  148,  151,
      151,  153,  153,  161,  165,  156,  167,  168,  123,  123,
      123,  123,  123,  123,  155,  169,  141,  142,  143,  144,
      145,  146,  170,  147,  148,  171,  172,  173,  161,  162,
      165,  167,  168,  174,  162,  162,  162,  162,  162,  162,

      169,  177,  154,  181,  183,  182,  149,  131,  170,  115,
      171,  172,  184,  173,  182,  187,  188,  189,  174,  190,
      162,  162,  162,  162,  162,  162,  177,  178,  181,  191,
      183,  182,  178,  178,  178,  178,  178,  178,  184,  182,
      187,  188,  189,  195,  196,  190,  197,  198,  112,  199,
      200,  203,  204,  107,  207,  191,  208,  209,  178,  178,
      178,  178,  178,  178,  210,  212,  213,  214,  195,  196,
      215,  217,  197,  198,  199,  200,  203,  219,  204,  207,
      220,  208,  209,  221,  222,  223,  104,  224,  225,  210,
      212,  226,  213,  214,  228,  215,  217,  229,  230,   76,

      231,  232,  219,  233,  234,  220,  235,  236,  221,  237,
      222,  223,  224,  225,  238,  240,  226,  241,  244,  228,
      245,  246,  252,  229,  230,  231,  232,  248,  233,  234,
      249,  235,  236,  250,  237,  251,  253,  254,  255,  238,
      240,  256,  241,  244,  257,  245,  258,  246,  252,  259,
      260,  262,  248,  261,  264,  249,  265,  267,  250,  268,
      251,  269,  253,  254,  255,  272,   58,  256,  273,  257,
      274,  276,  258,   42,  259,   35,  260,  262,  261,  264,
       31,   29,  265,  267,  268,   28,  269,   27,    0,    0,
        0,  272,    0,  273,    0,  274,  276,  279,  279,  279,

      279,  279,  280,  280,  280,  280,  280,  281,  281,  281,
      281,  281,  282,  282,  282,  282,  282,  283,  283,  283,
      283,  283,  284,  284,  284,  284,  284,  285,  285,  285,
      285,  285,  286,  286,  286,  286,  286,  287,  287,  287,
      287,  287,  288,  288,  288,  288,  288,  289,  289,  289,
      289,  289,  290,  290,  291,  291,  292,  292,  292,  292,
      292,  293,  293,  294,  294,    0,  294,  294,  295,  295,
        0,  295,  295,  296,    0,  296,  296,  296,  297,  297,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,

      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static yyconst flex_int16_t yy_rule_linenum[82] =
    {   0,
       57,   58,   59,   62,   63,   64,   65,   66,   67,   68,
       69,   70,   71,   72,   73,   74,   75,   76,   77,   99,
      103,  104,  105,  109,  110,  111,  112,  132,  136,  144,
      145,  146,  147,  160,  161,  162,  163,  164,  165,  166,
      167,  168,  169,  170,  171,  172,  173,  174,  175,  179,
      180,  181,  182,  186,  187,  188,  192,  193,  194,  195,
      199,  200,  201,  205,  206,  207,  208,  209,  210,  214,
      215,  219,  220,  224,  226,  227,  228,  229,  243,  244,
      245
    } ;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
# include <cstdlib>
# include <cerrno>
# include <climits>
# include <string>
# include "keymagic-driver.hpp"
# include "keymagic-parser.tab.hpp"

#define yyterminate() return token::END

int lastState=0;
# define YY_USER_ACTION  yylloc->columns (yyleng);
#define MAX_INCLUDE_DEPTH 100
int include_stack_ptr = 0;
std::string includeFile;

typedef struct {
std::string fileName;
YY_BUFFER_STATE yyBuffer;
yy::location yylloc;
} FILEINFO;

FILEINFO fileinfo[MAX_INCLUDE_DEPTH];

#define INITIAL 0
#define S_SQSTRING 1
#define S_DQSTRING 2
#define S_SQUAREBRK 3
#define S_SWITCH 4
#define S_VKSTATE 5
#define S_LINECOMMENT 6
#define S_BLOCKCOMMENT 7
#define S_OPTIONS 8
#define S_GET_OPTION 9
#define S_NEXTLINE 10
#define S_INCLUDE 11
#define S_INCFILE 12
#define S_ERROR 13

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals (void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

/* %not-for-header */

    static void yyunput (int c,char *buf_ptr  );
    
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */

  yylloc->step ();
  typedef yy::keymagic_parser::token token;

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 279 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 278 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
					{
					(yy_full_match) = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 82 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 82 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 83 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */

case 1:
YY_RULE_SETUP
;
	YY_BREAK
case 2:
YY_RULE_SETUP
{BEGIN(S_SQUAREBRK);}
	YY_BREAK
case 3:
YY_RULE_SETUP
{
						yylval->wsval = driver.U8toU16(std::string(yytext)); return(token::IDENTIFIER);
					}
	YY_BREAK
case 4:
YY_RULE_SETUP
{sscanf(&(yytext[1]),"%x", &yylval->ival); return(token::UNIHEX);}
	YY_BREAK
case 5:
YY_RULE_SETUP
{return(token::EQUAL);}
	YY_BREAK
case 6:
YY_RULE_SETUP
{return(token::RULE_OUT);}
	YY_BREAK
case 7:
YY_RULE_SETUP
{yylval->ival = atoi(&yytext[1]); return(token::REFERENCE);}
	YY_BREAK
case 8:
YY_RULE_SETUP
{return(token::PLUS);}
	YY_BREAK
case 9:
YY_RULE_SETUP
{lastState=0; BEGIN(S_DQSTRING);}
	YY_BREAK
case 10:
YY_RULE_SETUP
{lastState=0; BEGIN(S_SQSTRING);}
	YY_BREAK
case 11:
YY_RULE_SETUP
{return(token::ANY);}
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
{yylloc->lines (1); return(token::NEWLINE);}
	YY_BREAK
case 13:
YY_RULE_SETUP
{BEGIN(S_SWITCH); return(token::SWITCH_START);}
	YY_BREAK
case 14:
YY_RULE_SETUP
{lastState=0; BEGIN(S_VKSTATE); return(token::VK_STATES_BEGIN); }
	YY_BREAK
case 15:
YY_RULE_SETUP
{lastState=0; BEGIN(S_LINECOMMENT);}
	YY_BREAK
case 16:
YY_RULE_SETUP
{lastState=0; BEGIN(S_BLOCKCOMMENT);}
	YY_BREAK
case 17:
YY_RULE_SETUP
{BEGIN(S_NEXTLINE);}
	YY_BREAK
case 18:
YY_RULE_SETUP
{includeFile="";BEGIN(S_INCLUDE);}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
						if (driver.CheckPreDefined(yytext) == false) {
							//yylloc->columns (-yyleng);
							//REJECT;
							std::string err = "Unrecognized token! ";
							err += yytext;
							driver.error(*yylloc, err);
						}
						yylval->sval = new std::string(yytext);
						return(token::PREDEFINED);
					}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
{
						if (--include_stack_ptr < 0 ) {
							yyterminate();
						} else {
							yy_delete_buffer(YY_CURRENT_BUFFER );
							FILEINFO thisFileInfo = fileinfo[include_stack_ptr];
							yy_switch_to_buffer(thisFileInfo.yyBuffer );
							delete yylloc->begin.filename;
							*yylloc = thisFileInfo.yylloc;
						}
					}
	YY_BREAK
case 20:
YY_RULE_SETUP
{BEGIN(S_ERROR); unput(*yytext); }
	YY_BREAK

case 21:
YY_RULE_SETUP
;
	YY_BREAK
case 22:
YY_RULE_SETUP
{lastState=0;BEGIN(S_INCFILE);}
	YY_BREAK
case 23:
YY_RULE_SETUP
{BEGIN(S_ERROR); unput(*yytext); }
	YY_BREAK

case 24:
YY_RULE_SETUP
;
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
{includeFile=std::string(yytext).substr(1, strlen(yytext)-2 );}
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
{includeFile=std::string(yytext).substr(1, strlen(yytext)-2 );}
	YY_BREAK
case 27:
YY_RULE_SETUP
{ /* got the include file name */
						if ( include_stack_ptr >= MAX_INCLUDE_DEPTH ) {
							driver.error("Includes nested too deeply");
						}
						std::string thisFile, incfileName;

						thisFile = *yylloc->begin.filename;
						FILEINFO * thisFileInfo = &fileinfo[include_stack_ptr++];
						thisFileInfo->yylloc = *yylloc;
						thisFileInfo->yyBuffer = YY_CURRENT_BUFFER;
						if ( ! driver.openIncludeFile(thisFile, includeFile, &incfileName) )
							driver.error(*yylloc, std::string("cannot open include file:") + incfileName);

						yy_switch_to_buffer(yy_create_buffer(yyin,YY_BUF_SIZE ) );
						yylloc->begin.line = yylloc->begin.column = 1;
						yylloc->end.line = yylloc->end.column = 1;

						yylloc->begin.filename = yylloc->end.filename = new std::string(incfileName);
						BEGIN(INITIAL);
					}
	YY_BREAK
case 28:
YY_RULE_SETUP
{BEGIN(S_ERROR); unput(*yytext); }
	YY_BREAK

case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
{
					std::string err = "Unrecognized token! ";
					err += yytext;
					driver.error(*yylloc, err);
					}
	YY_BREAK

case 30:
YY_RULE_SETUP
{BEGIN(lastState); return(token::VK_STATES_END); }
	YY_BREAK
case 31:
YY_RULE_SETUP
{return(token::AND); }
	YY_BREAK
case 32:
YY_RULE_SETUP

	YY_BREAK
case 33:
YY_RULE_SETUP
{
					if (driver.CheckPreDefined(yytext) == false) {
						//yylloc->columns (-yyleng);
						std::string err = "Unrecognized token! ";
						err += yytext;
						driver.error(*yylloc, err);
					}
					yylval->sval = new std::string(yytext);
					return(token::PREDEFINED);
				}
	YY_BREAK

case 34:
YY_RULE_SETUP
;
	YY_BREAK
case 35:
YY_RULE_SETUP
{return (token::OPT_NAME); }
	YY_BREAK
case 36:
YY_RULE_SETUP
{return (token::OPT_FONTFAMILY); }
	YY_BREAK
case 37:
YY_RULE_SETUP
{return (token::OPT_DESCRIPTION); }
	YY_BREAK
case 38:
YY_RULE_SETUP
{return (token::OPT_ICON); }
	YY_BREAK
case 39:
YY_RULE_SETUP
{return (token::OPT_CAPS); }
	YY_BREAK
case 40:
YY_RULE_SETUP
{return (token::OPT_HOTKEY); }
	YY_BREAK
case 41:
YY_RULE_SETUP
{return (token::OPT_EAT); }
	YY_BREAK
case 42:
YY_RULE_SETUP
{return (token::OPT_EAT); }
	YY_BREAK
case 43:
YY_RULE_SETUP
{return (token::OPT_US_LAYOUT); }
	YY_BREAK
case 44:
YY_RULE_SETUP
{return (token::OPT_US_LAYOUT); }
	YY_BREAK
case 45:
YY_RULE_SETUP
{return (token::OPT_SMART_BACKSPACE); }
	YY_BREAK
case 46:
YY_RULE_SETUP
{BEGIN(S_GET_OPTION); }
	YY_BREAK
case 47:
YY_RULE_SETUP
{driver.warn(*yylloc, "Did you forget to add '=' ?"); BEGIN(lastState);}
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
{driver.warn(*yylloc, "Unrecognized Option!"); BEGIN(lastState);}
	YY_BREAK
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
{BEGIN(lastState); unput('\n'); }
	YY_BREAK

case 50:
YY_RULE_SETUP
;
	YY_BREAK
case 51:
YY_RULE_SETUP
{BEGIN(S_DQSTRING);}
	YY_BREAK
case 52:
YY_RULE_SETUP
{BEGIN(S_SQSTRING);}		
	YY_BREAK
case 53:
/* rule 53 can match eol */
YY_RULE_SETUP
{BEGIN(lastState); unput('\n'); }
	YY_BREAK

case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
{yylloc->lines (1); BEGIN(0);}
	YY_BREAK
case 55:
YY_RULE_SETUP
{lastState=S_LINECOMMENT; BEGIN(S_OPTIONS);}
	YY_BREAK
case 56:
YY_RULE_SETUP
;
	YY_BREAK

case 57:
YY_RULE_SETUP
{BEGIN(0);}
	YY_BREAK
case 58:
YY_RULE_SETUP
{lastState=S_BLOCKCOMMENT; BEGIN(S_OPTIONS);}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
{yylloc->lines (1);}
	YY_BREAK
case 60:
YY_RULE_SETUP
;
	YY_BREAK

case 61:
YY_RULE_SETUP
{lastState=S_SWITCH;BEGIN(S_DQSTRING);}
	YY_BREAK
case 62:
YY_RULE_SETUP
{lastState=S_SWITCH;BEGIN(S_SQSTRING);}
	YY_BREAK
case 63:
YY_RULE_SETUP
{BEGIN(INITIAL); return(token::SWITCH_END);}
	YY_BREAK

case 64:
YY_RULE_SETUP
{BEGIN(INITIAL);}
	YY_BREAK
case 65:
YY_RULE_SETUP
{yylval->ival = atoi(&yytext[1]); return(token::MOD_MATCH_INDEX);}
	YY_BREAK
case 66:
YY_RULE_SETUP
{return(token::MOD_ANY); }
	YY_BREAK
case 67:
YY_RULE_SETUP
{return(token::MOD_NOT); }
	YY_BREAK
case 68:
YY_RULE_SETUP
;
	YY_BREAK
case 69:
YY_RULE_SETUP
{BEGIN(S_ERROR); unput(*yytext); }
	YY_BREAK

case 70:
YY_RULE_SETUP
{BEGIN(lastState);}
	YY_BREAK
case 71:
YY_RULE_SETUP
{yylval->ival=yytext[0]; return(token::CHAR);}
	YY_BREAK

case 72:
YY_RULE_SETUP
{BEGIN(lastState);}
	YY_BREAK
case 73:
YY_RULE_SETUP
{yylval->ival=yytext[0]; return(token::CHAR);}
	YY_BREAK

case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
{driver.error(*yylloc, "Unterminated string");BEGIN(lastState);}
	YY_BREAK
case YY_STATE_EOF(S_SQSTRING):
case YY_STATE_EOF(S_DQSTRING):
{driver.error(*yylloc, "EOF in string"); BEGIN(lastState);}
	YY_BREAK
case 75:
YY_RULE_SETUP
{sscanf(&(yytext[2]),"%4x", &yylval->ival); return(token::UNICHAR);}
	YY_BREAK
case 76:
YY_RULE_SETUP
{sscanf(&(yytext[2]),"%x", &yylval->ival); return(token::UNICHAR);}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP

	YY_BREAK
case 78:
YY_RULE_SETUP
{
							switch(yytext[yyleng-1]) {
							case 'b' : yylval->ival = '\b'; return(token::CHAR);
							case 't' : yylval->ival = '\t'; return(token::CHAR);
							case 'n' : yylval->ival = '\n'; return(token::CHAR);
							case 'v' : yylval->ival = '\v'; return(token::CHAR);
							case 'f' : yylval->ival = '\f'; return(token::CHAR);
							case 'r' : yylval->ival = '\r'; return(token::CHAR);
							default: yylval->ival = yytext[yyleng-1]; return(token::CHAR);
							}
						}
	YY_BREAK

case 79:
YY_RULE_SETUP

	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
{yylloc->lines (1); BEGIN(INITIAL); }
	YY_BREAK
case 81:
YY_RULE_SETUP
{driver.error(*yylloc, "Expecting new line!"); yyterminate();}
	YY_BREAK

case 82:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(S_SQUAREBRK):
			case YY_STATE_EOF(S_SWITCH):
			case YY_STATE_EOF(S_VKSTATE):
			case YY_STATE_EOF(S_LINECOMMENT):
			case YY_STATE_EOF(S_BLOCKCOMMENT):
			case YY_STATE_EOF(S_OPTIONS):
			case YY_STATE_EOF(S_GET_OPTION):
			case YY_STATE_EOF(S_NEXTLINE):
			case YY_STATE_EOF(S_INCLUDE):
			case YY_STATE_EOF(S_INCFILE):
			case YY_STATE_EOF(S_ERROR):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 279 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 279 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 278);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */

    static void yyunput (int c, register char * yy_bp )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */

/* %endif */

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* %if-c-only */

/* %endif */

/* %if-c++-only */
/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

void
keymagic_driver::scan_begin ()
{
	yy_flex_debug = trace_scanning;
	if (file == "-")
		yyin = stdin;
	else if (!openFile(file)) {
      error (std::string ("cannot open ") + file);
      exit (1);
	}
}

bool
keymagic_driver::openFile (const std::string& strFile)
{
	if (!(yyin = fopen (strFile.c_str (), "r"))) {
      return false;
	}

	unsigned char UTF8[3] = { 0xEF, 0xBB, 0xBF };

	char buf[3];
	fread(buf, 1, 3, yyin);
	if (memcmp(buf, UTF8, 3) != 0) {
		fpos_t p = 0;
		fsetpos(yyin, &p);
	}
	return true;
}

void
keymagic_driver::scan_end ()
{
  fclose (yyin);
}

